@use "sass:color";
@use "sass:math";
@use "sass:list";

@use "viewing-conditions";
@use "../color-utils";
@use "../math-utils";

@function from-color($color) {
  $red: color.red($color);
  $green: color.green($color);
  $blue: color.blue($color);
  $argb: color-utils.argb-from-rgb($red, $green, $blue);

  $redL: color-utils.linearized($red);
  $greenL: color-utils.linearized($green);
  $blueL: color-utils.linearized($blue);

  $x: 0.41233895 * $redL + 0.35762064 * $greenL + 0.18051042 * $blueL;
  $y: 0.2126 * $redL + 0.7152 * $greenL + 0.0722 * $blueL;
  $z: 0.01932141 * $redL + 0.11916382 * $greenL + 0.95034478 * $blueL;
  $rC: 0.401288 * $x + 0.650173 * $y - 0.051461 * $z;
  $gC: -0.250268 * $x + 1.204414 * $y + 0.045854 * $z;
  $bC: -0.002079 * $x + 0.048952 * $y + 0.953127 * $z;

  $rD: list.nth(viewing-conditions.$rgbD, 1) * $rC;
  $gD: list.nth(viewing-conditions.$rgbD, 2) * $gC;
  $bD: list.nth(viewing-conditions.$rgbD, 3) * $bC;

  $rAF: math.pow(math.div(viewing-conditions.$fl * math.abs($rD), 100.0), 0.42);
  $gAF: math.pow(math.div(viewing-conditions.$fl * math.abs($gD), 100.0), 0.42);
  $bAF: math.pow(math.div(viewing-conditions.$fl * math.abs($bD), 100.0), 0.42);

  $rA: math.div(math-utils.signum($rD) * 400.0 * $rAF, $rAF + 27.13);
  $gA: math.div(math-utils.signum($gD) * 400.0 * $gAF, $gAF + 27.13);
  $bA: math.div(math-utils.signum($bD) * 400.0 * $bAF, $bAF + 27.13);

  $a: math.div(11.0 * $rA + -12.0 * $gA + $bA, 11.0);
  $b: math.div($rA + $gA - 2.0 * $bA, 9.0);
  $u: math.div(20.0 * $rA + 20.0 * $gA + 21.0 * $bA, 20.0);
  $p2: math.div(40.0 * $rA + 20.0 * $gA + $bA, 20.0);

  $atanDegrees: math-utils.strip-unit(math.atan2($b, $a));
  $hue: if($atanDegrees < 0,
    $atanDegrees + 360.0,
    if($atanDegrees >= 360,
      $atanDegrees - 360.0, $atanDegrees));

  $hueRadians: math.div($hue * math.$pi, 180.0);

  $ac: $p2 * viewing-conditions.$nbb;
  $j: 100.0 * math.pow(math.div($ac, viewing-conditions.$aw),  viewing-conditions.$c * viewing-conditions.$z);
  $q: math.div(4.0, viewing-conditions.$c) * math.sqrt(math.div($j, 100.0)) *
  (viewing-conditions.$aw + 4.0) * viewing-conditions.$fLRoot;
  $huePrime: if($hue < 20.14, $hue + 360, $hue);

  $eHue: 0.25 * (math.cos(math.div($huePrime * math.$pi, 180.0) + 2.0) + 3.8);
  $p1: math.div(50000.0, 13.0) * $eHue * viewing-conditions.$nc * viewing-conditions.$ncb;
  $t: math.div($p1 * math.sqrt($a * $a + $b * $b), $u + 0.305);
  $alpha: math.pow($t, 0.9) * math.pow(1.64 - math.pow(0.29, viewing-conditions.$n), 0.73);
  $c: $alpha * math.sqrt(math.div($j, 100.0));

  @return ("hue": $hue, "chroma": $c);
}
