@use "sass:list";
@use "sass:math";

@function signum($num) {
  @if ($num < 0) {
    @return -1;
  } @else if ($num == 0) {
    @return 0;
  } @else {
    @return 1;
  }
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

@function atan2($y, $x) {
  @return strip-unit(math.atan2($y, $x) * math.div(math.$pi, 180));
}

@function sanitize-degrees-double($degrees) {
 $degrees: $degrees % 360.0;
   @if ($degrees < 0) {
   $degrees: $degrees + 360.0;
  }

  @return $degrees;
}

@function _matrix-nth($matrix, $index1, $index2) {
  @return list.nth(list.nth($matrix, $index1 + 1), $index2 + 1);
}

@function matrix-multiply($row, $matrix) {
  $a: list.nth($row, 1) * _matrix-nth($matrix, 0, 0) + list.nth($row, 2) * _matrix-nth($matrix, 0, 1) + list.nth($row, 3) * _matrix-nth($matrix, 0, 2);
  $b: list.nth($row, 1) * _matrix-nth($matrix, 1, 0) + list.nth($row, 2) * _matrix-nth($matrix, 1, 1) + list.nth($row, 3) * _matrix-nth($matrix, 1, 2);
  $c: list.nth($row, 1) * _matrix-nth($matrix, 2, 0) + list.nth($row, 2) * _matrix-nth($matrix, 2, 1) + list.nth($row, 3) * _matrix-nth($matrix, 2, 2);
  @return ($a, $b, $c);
}
