@use "sass:math";
@use "sass:list";

$int-max-value: 2147483647;
$int-min-value: -2147483648;

@function convert-binary-to-int($binary, $negative) {
  @if ($negative) {
    $binary: invert-two-complement($binary);
  }

  $value: 0;
  $factor: 1;

  @for $i from 1 through list.length($binary) {

    $value: $value + list.nth($binary, $i) * $factor;

    $factor: $factor * 2;
  }

  @if ($negative) {
    @return $value * - 1;
  }

  @return $value;
}

@function convert-int-to-binary($value) {
  $binary: ();

  @for $i from 1 through 32 {
    $quotient: math.floor(math.div($value, 2));
    $remainder: $value - ($quotient * 2);

    $binary: list.append($binary, $remainder);
    $value: $quotient;
  }

  @return $binary;
}

@function not-binary($binary) {
  $not-result: ();

  @for $i from 1 through list.length($binary) {

    $value: list.nth($binary, $i);

    @if ($value == 0) {
      $not-result: list.append($not-result, 1);
    } @else {
      $not-result: list.append($not-result, 0);
    }
  }

  @return $not-result;
}

@function invert-two-complement($binary-value) {
  $int-value: convert-binary-to-int($binary-value, false) - 1;
  $binary-value: convert-int-to-binary($int-value);
  @return not-binary($binary-value);
}

@function unsign-int($value) {
  @return $int-max-value + ($int-min-value - $value) * -1 + 1;
}

@function left-shift($value, $shift) {

  @for $i from 1 through $shift {
    $value: $value * 2;
  }

  @if ($value <= $int-max-value) {
    @return $value;
  }

  @return $int-min-value + ($value - $int-max-value) - 1;
}

@function right-shift($value, $shift) {

  @for $i from 1 through $shift {
    $value: math.floor(math.div($value, 2));
  }

  @return $value;
}

@function bitwise-or($base-value, $values...) {
  $any-negative-value: $base-value < 0;

  $or-result: convert-int-to-binary($base-value);

  @each $value in $values {
    $other-binary: convert-int-to-binary($value);
    $any-negative-value: $any-negative-value or $value < 0;

    @for $i from 1 through 32 {

      $base-value: list.nth($or-result, $i);
      $other-value: list.nth($other-binary, $i);

      $or-result: list.set-nth($or-result, $i, math.min(1, $base-value + $other-value));
    }
  }

  @return convert-binary-to-int($or-result, $any-negative-value);
}

@function bitwise-and($base-value, $values...) {

  $and-result: convert-int-to-binary($base-value);

  @each $value in $values {
    $other-binary: convert-int-to-binary($value);

    @for $i from 1 through 32 {

      $base-value: list.nth($and-result, $i);
      $other-value: list.nth($other-binary, $i);

      $and-result: list.set-nth($and-result, $i, if($base-value == 1 and $other-value == 1, 1, 0));
    }
  }

  @return convert-binary-to-int($and-result, false);
}
