@use "sass:color";
@use "sass:list";
@use "sass:math";
@use "bitwise";

@function argb-from-hex($hex) {
  $red: color.red($hex);
  $green: color.green($hex);
  $blue: color.blue($hex);

  @return argb-from-rgb($red, $green, $blue);
}

@function argb-from-rgb($red, $green, $blue) {
  @return bitwise.unsign-int(
      bitwise.bitwise-or(
          bitwise.left-shift(255, 24),
          bitwise.left-shift($red, 16),
          bitwise.left-shift($green, 8), $blue));
}

@function argb-from-linrgb($linrgb) {
  $red: delinearized(list.nth($linrgb, 1));
  $green: delinearized(list.nth($linrgb, 2));
  $blue: delinearized(list.nth($linrgb, 3));

  @return argb-from-rgb($red, $green, $blue);
}

@function argb-from-lstar($lstar) {
  $y: y-from-lstar($lstar);
  $component: delinearized($y);

  @return argb-from-rgb($component, $component, $component);
}

@function red-from-argb($argb) {
  @return bitwise.bitwise-and(bitwise.right-shift($argb, 16), 255)
}

@function green-from-argb($argb) {
  @return bitwise.bitwise-and(bitwise.right-shift($argb, 8), 255)
}

@function blue-from-argb($argb) {
  @return bitwise.bitwise-and($argb, 255)
}

@function linearized($rgbComponent) {
  $normalized: math.div($rgbComponent, 255.0);

  @if ($normalized <= 0.040449936) {
    @return math.div($normalized, 12.92) * 100.0;
  } @else {
    @return math.pow(math.div($normalized + 0.055, 1.055), 2.4) * 100.0;
  }
}

@function delinearized($rgbComponent) {
  $normalized: math.div($rgbComponent, 100.0);
  $delinearized: 0.0;
  @if ($normalized <= 0.0031308) {
    $delinearized: $normalized * 12.92;
  } @else {
    $delinearized: 1.055 * math.pow($normalized, math.div(1.0, 2.4)) - 0.055;
  }

  @return math.clamp(0, 255, math.round($delinearized * 255.0));
}

@function y-from-lstar($lstar) {
  @return 100.0 * lab-invf(math.div($lstar + 16.0, 116.0));
}

@function lab-invf($ft) {
  $e: math.div(216.0, 24389.0);
  $kappa: math.div(24389.0, 27.0);
  $ft3: $ft * $ft * $ft;
  @if ($ft3 > $e) {
    @return $ft3;
  } @else {
    @return math.div(116 * $ft - 16, $kappa);
  }
}
